// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then
 * the in value is loaded into the memory location specified by address
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    DMux8Way(in=load, sel=address[3..5], a=reg0, b=reg1, c=reg2, d=reg3, e=reg4, f=reg5, g=reg6, h=reg7);
  	RAM8(in=in, load=reg0, address=address[0..2], out=regOut0);
  	RAM8(in=in, load=reg1, address=address[0..2], out=regOut1);
  	RAM8(in=in, load=reg2, address=address[0..2], out=regOut2);
  	RAM8(in=in, load=reg3, address=address[0..2], out=regOut3);
  	RAM8(in=in, load=reg4, address=address[0..2], out=regOut4);
  	RAM8(in=in, load=reg5, address=address[0..2], out=regOut5);
  	RAM8(in=in, load=reg6, address=address[0..2], out=regOut6);
  	RAM8(in=in, load=reg7, address=address[0..2], out=regOut7);
    Mux8Way16(a=regOut0, b=regOut1, c=regOut2, d=regOut3, e=regOut4, f=regOut5, g=regOut6, h=regOut7, sel=address[3..5], out=out);
}
